generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                         @id @default(autoincrement())
  username                 String                      @unique @db.VarChar(255)
  passwordHash             String                      @map("password_hash") @db.VarChar(255)
  email                    String                      @unique @db.VarChar(255)
  role                     String                      @db.VarChar(50)
  createdAt                DateTime?                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?                   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  managerId                Int?                        @map("manager_id")
  currentWorkload          Int                         @default(0) @map("current_workload")
  departmentId             Int?                        @map("department_id")
  experienceLevel          String?                     @map("experience_level") @db.VarChar(50)
  isAvailable              Boolean                     @default(true) @map("is_available")
  isBusinessReviewer       Boolean                     @default(false) @map("is_business_reviewer")
  isKasdaUser              Boolean                     @default(false) @map("is_kasda_user")
  primarySkill             String?                     @map("primary_skill") @db.VarChar(100)
  secondarySkills          String?                     @map("secondary_skills")
  workloadCapacity         Int                         @default(10) @map("workload_capacity")
  createdApiTokens         ApiToken[]                  @relation("ApiTokenCreator")
  bsgTemplateUsageLogs     BSGTemplateUsageLog[]       @relation("BSGTemplateUsageUser")
  businessApprovals        BusinessApproval[]          @relation("BusinessApprovalReviewer")
  commentNotifications     CommentNotification[]       @relation("NotificationRecipient")
  kasdaProfile             KasdaUserProfile?
  approvedTemplates        TemplateMetadata[]          @relation("TemplateApprover")
  createdTemplates         TemplateMetadata[]          @relation("TemplateCreator")
  templateUsageLogs        TemplateUsageLog[]
  assignmentLogsAsAssigner TicketAssignmentLog[]       @relation("AssignmentLogAssigner")
  assignmentLogsAsAssignee TicketAssignmentLog[]       @relation("AssignmentLogAssignee")
  assignmentLogsAsPrevious TicketAssignmentLog[]       @relation("AssignmentLogPrevious")
  uploadedAttachments      TicketAttachment[]
  classificationAudits     TicketClassificationAudit[]
  authoredComments         TicketComment[]             @relation("CommentAuthor")
  deletedComments          TicketComment[]             @relation("CommentDeleter")
  editedComments           TicketComment[]             @relation("CommentEditor")
  assignedTickets          Ticket[]                    @relation("TicketAssignee")
  createdTickets           Ticket[]                    @relation("TicketCreator")
  techCategorizedTickets   Ticket[]                    @relation("TechCategorizer")
  department               Department?                 @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager                  User?                       @relation("UserManager", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates             User[]                      @relation("UserManager")

  @@map("users")
}

model Department {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique @db.VarChar(255)
  description          String?
  departmentType       String                @default("internal") @map("department_type") @db.VarChar(50)
  isServiceOwner       Boolean               @default(false) @map("is_service_owner")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  autoAssignmentRules  AutoAssignmentRule[]
  bsgTemplateUsageLogs BSGTemplateUsageLog[] @relation("BSGTemplateUsageDept")
  categories           Category[]
  slaPolicy            DepartmentSlaPolicy[]
  masterDataEntities   MasterDataEntity[]
  serviceCatalog       ServiceCatalog[]
  templateCategories   TemplateCategory[]
  templateMetadata     TemplateMetadata[]
  templateUsageLogs    TemplateUsageLog[]
  users                User[]

  @@map("departments")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  departmentId  Int?          @map("department_id")
  department    Department?   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories SubCategory[]

  @@unique([departmentId, name])
  @@map("categories")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  categoryId Int?      @map("category_id")
  items      Item[]
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([categoryId, name])
  @@map("sub_categories")
}

model Item {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(255)
  subCategoryId Int?             @map("sub_category_id")
  subCategory   SubCategory?     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templates     TicketTemplate[]
  tickets       Ticket[]

  @@unique([subCategoryId, name])
  @@map("items")
}

model TicketTemplate {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @db.VarChar(255)
  itemId                 Int?                    @map("item_id")
  description            String?
  autoAssignmentRules    AutoAssignmentRule[]
  customFieldDefinitions CustomFieldDefinition[]
  metadata               TemplateMetadata?
  usageLogs              TemplateUsageLog[]
  item                   Item?                   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tickets                Ticket[]

  @@unique([itemId, name])
  @@map("ticket_templates")
}

model CustomFieldDefinition {
  id                      Int                      @id @default(autoincrement())
  templateId              Int?                     @map("template_id")
  fieldName               String                   @map("field_name") @db.VarChar(255)
  fieldLabel              String?                  @map("field_label") @db.VarChar(255)
  fieldType               String                   @map("field_type") @db.VarChar(50)
  options                 Json?
  isRequired              Boolean?                 @default(false) @map("is_required")
  placeholder             String?
  default_value           String?
  template                TicketTemplate?          @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticketCustomFieldValues TicketCustomFieldValue[]

  @@unique([templateId, fieldName])
  @@map("custom_field_definitions")
}

model Ticket {
  id                       Int                         @id @default(autoincrement())
  title                    String                      @db.VarChar(255)
  description              String
  status                   ticket_status               @default(open)
  priority                 ticket_priority             @default(medium)
  createdByUserId          Int                         @map("created_by_user_id")
  assignedToUserId         Int?                        @map("assigned_to_user_id")
  createdAt                DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resolvedAt               DateTime?                   @map("resolved_at") @db.Timestamptz(6)
  slaDueDate               DateTime?                   @map("sla_due_date") @db.Timestamptz(6)
  itemId                   Int?                        @map("item_id")
  templateId               Int?                        @map("template_id")
  managerComments          String?                     @map("manager_comments")
  businessComments         String?                     @map("business_comments")
  businessImpact           business_impact             @default(medium) @map("business_impact")
  confirmedIssueCategory   issue_category_type?        @map("confirmed_issue_category")
  confirmedRootCause       root_cause_type?            @map("confirmed_root_cause")
  governmentEntityId       Int?                        @map("government_entity_id")
  isClassificationLocked   Boolean                     @default(false) @map("is_classification_locked")
  isKasdaTicket            Boolean                     @default(false) @map("is_kasda_ticket")
  requestType              request_type                @default(service_request) @map("request_type")
  requiresBusinessApproval Boolean                     @default(false) @map("requires_business_approval")
  serviceCatalogId         Int?                        @map("service_catalog_id")
  serviceItemId            Int?                        @map("service_item_id")
  serviceTemplateId        Int?                        @map("service_template_id")
  techCategorizedAt        DateTime?                   @map("tech_categorized_at") @db.Timestamptz(6)
  techCategorizedBy        Int?                        @map("tech_categorized_by")
  techIssueCategory        issue_category_type?        @map("tech_issue_category")
  techOverrideReason       String?                     @map("tech_override_reason") @db.VarChar(500)
  techRootCause            root_cause_type?            @map("tech_root_cause")
  userCategorizedAt        DateTime?                   @map("user_categorized_at") @db.Timestamptz(6)
  userCategorizedIP        String?                     @map("user_categorized_ip") @db.VarChar(45)
  userIssueCategory        issue_category_type?        @map("user_issue_category")
  userRootCause            root_cause_type?            @map("user_root_cause")
  bsgUsageLogs             BSGTemplateUsageLog[]       @relation("BSGTemplateUsageTicket")
  bsgFieldValues           BSGTicketFieldValue[]       @relation("TicketBSGFieldValues")
  businessApproval         BusinessApproval?
  templateUsageLogs        TemplateUsageLog[]
  assignmentLogs           TicketAssignmentLog[]
  attachments              TicketAttachment[]
  classificationAudit      TicketClassificationAudit[]
  comments                 TicketComment[]
  customFieldValues        TicketCustomFieldValue[]
  serviceFieldValues       TicketServiceFieldValue[]
  assignedTo               User?                       @relation("TicketAssignee", fields: [assignedToUserId], references: [id], onUpdate: NoAction)
  createdBy                User                        @relation("TicketCreator", fields: [createdByUserId], references: [id], onUpdate: NoAction)
  governmentEntity         GovernmentEntity?           @relation("GovernmentEntityTickets", fields: [governmentEntityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item                     Item?                       @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceCatalog           ServiceCatalog?             @relation("ServiceCatalogTickets", fields: [serviceCatalogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceItem              ServiceItem?                @relation("ServiceItemTickets", fields: [serviceItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate          ServiceTemplate?            @relation("ServiceTemplateTickets", fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  techCategorizedByUser    User?                       @relation("TechCategorizer", fields: [techCategorizedBy], references: [id], onUpdate: NoAction)
  template                 TicketTemplate?             @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tickets")
}

model TicketAttachment {
  id               Int       @id @default(autoincrement())
  ticketId         Int       @map("ticket_id")
  fileName         String    @map("file_name") @db.VarChar(255)
  filePath         String    @map("file_path") @db.VarChar(255)
  fileSize         Int       @map("file_size")
  fileType         String?   @map("file_type") @db.VarChar(100)
  uploadedByUserId Int?      @map("uploaded_by_user_id")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  ticket           Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploadedBy       User?     @relation(fields: [uploadedByUserId], references: [id], onUpdate: NoAction)

  @@index([ticketId], map: "idx_ticket_attachments_ticket_id")
  @@map("ticket_attachments")
}

model TicketCustomFieldValue {
  id                Int                   @id @default(autoincrement())
  ticketId          Int                   @map("ticket_id")
  fieldDefinitionId Int                   @map("field_definition_id")
  value             String?
  fieldDefinition   CustomFieldDefinition @relation(fields: [fieldDefinitionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket            Ticket                @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ticketId, fieldDefinitionId])
  @@map("ticket_custom_field_values")
}

model ServiceCatalog {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  description      String?
  serviceType      service_type     @default(business_service) @map("service_type")
  categoryLevel    Int              @default(1) @map("category_level")
  parentId         Int?             @map("parent_id")
  departmentId     Int              @map("department_id")
  isActive         Boolean          @default(true) @map("is_active")
  requiresApproval Boolean          @default(false) @map("requires_approval")
  estimatedTime    Int?             @map("estimated_time")
  businessImpact   business_impact  @default(medium) @map("business_impact")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department       Department       @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent           ServiceCatalog?  @relation("ServiceHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children         ServiceCatalog[] @relation("ServiceHierarchy")
  serviceItems     ServiceItem[]
  tickets          Ticket[]         @relation("ServiceCatalogTickets")

  @@unique([departmentId, name])
  @@map("service_catalog")
}

model ServiceItem {
  id                  Int               @id @default(autoincrement())
  serviceCatalogId    Int               @map("service_catalog_id")
  name                String            @db.VarChar(255)
  description         String?
  requestType         request_type      @default(service_request) @map("request_type")
  isKasdaRelated      Boolean           @default(false) @map("is_kasda_related")
  requiresGovApproval Boolean           @default(false) @map("requires_gov_approval")
  isActive            Boolean           @default(true) @map("is_active")
  sortOrder           Int               @default(0) @map("sort_order")
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  serviceCatalog      ServiceCatalog    @relation(fields: [serviceCatalogId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templates           ServiceTemplate[]
  tickets             Ticket[]          @relation("ServiceItemTickets")

  @@unique([serviceCatalogId, name])
  @@map("service_items")
}

model ServiceTemplate {
  id                       Int                      @id @default(autoincrement())
  serviceItemId            Int                      @map("service_item_id")
  name                     String                   @db.VarChar(255)
  description              String?
  templateType             template_type            @default(standard) @map("template_type")
  isKasdaTemplate          Boolean                  @default(false) @map("is_kasda_template")
  requiresBusinessApproval Boolean                  @default(false) @map("requires_business_approval")
  isVisible                Boolean                  @default(true) @map("is_visible")
  sortOrder                Int                      @default(0) @map("sort_order")
  estimatedResolutionTime  Int?                     @map("estimated_resolution_time")
  createdAt                DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  customFieldDefinitions   ServiceFieldDefinition[]
  serviceItem              ServiceItem              @relation(fields: [serviceItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  metadata                 TemplateMetadata?
  usageLogs                TemplateUsageLog[]
  tickets                  Ticket[]                 @relation("ServiceTemplateTickets")

  @@unique([serviceItemId, name])
  @@map("service_templates")
}

model ServiceFieldDefinition {
  id                Int                       @id @default(autoincrement())
  serviceTemplateId Int                       @map("service_template_id")
  fieldName         String                    @map("field_name") @db.VarChar(255)
  fieldLabel        String                    @map("field_label") @db.VarChar(255)
  fieldType         field_type                @map("field_type")
  options           Json?
  isRequired        Boolean                   @default(false) @map("is_required")
  isKasdaSpecific   Boolean                   @default(false) @map("is_kasda_specific")
  placeholder       String?
  defaultValue      String?                   @map("default_value")
  validationRules   Json?                     @map("validation_rules")
  sortOrder         Int                       @default(0) @map("sort_order")
  isVisible         Boolean                   @default(true) @map("is_visible")
  createdAt         DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  serviceTemplate   ServiceTemplate           @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticketFieldValues TicketServiceFieldValue[]

  @@unique([serviceTemplateId, fieldName])
  @@map("service_field_definitions")
}

model GovernmentEntity {
  id            Int                @id @default(autoincrement())
  entityName    String             @map("entity_name") @db.VarChar(255)
  entityType    String             @map("entity_type") @db.VarChar(100)
  entityLevel   String             @map("entity_level") @db.VarChar(50)
  contactPerson String?            @map("contact_person") @db.VarChar(255)
  contactEmail  String?            @map("contact_email") @db.VarChar(255)
  contactPhone  String?            @map("contact_phone") @db.VarChar(50)
  address       String?
  isActive      Boolean            @default(true) @map("is_active")
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  kasdaUsers    KasdaUserProfile[]
  tickets       Ticket[]           @relation("GovernmentEntityTickets")

  @@map("government_entities")
}

model KasdaUserProfile {
  id                    Int              @id @default(autoincrement())
  userId                Int              @unique @map("user_id")
  governmentEntityId    Int              @map("government_entity_id")
  positionTitle         String           @map("position_title") @db.VarChar(255)
  authorityLevel        String           @map("authority_level") @db.VarChar(100)
  treasuryAccountAccess String[]         @map("treasury_account_access")
  budgetCodes           String[]         @map("budget_codes")
  fiscalYear            Int              @map("fiscal_year")
  governmentIdNumber    String?          @map("government_id_number") @db.VarChar(100)
  isActive              Boolean          @default(true) @map("is_active")
  createdAt             DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  governmentEntity      GovernmentEntity @relation(fields: [governmentEntityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("kasda_user_profiles")
}

model BusinessApproval {
  id                      Int             @id @default(autoincrement())
  ticketId                Int             @unique @map("ticket_id")
  businessReviewerId      Int             @map("business_reviewer_id")
  approvalStatus          approval_status @default(pending) @map("approval_status")
  businessComments        String?         @map("business_comments")
  govDocsVerified         Boolean         @default(false) @map("gov_docs_verified")
  authorizationLetterPath String?         @map("authorization_letter_path")
  approvedAt              DateTime?       @map("approved_at") @db.Timestamptz(6)
  createdAt               DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  businessReviewer        User            @relation("BusinessApprovalReviewer", fields: [businessReviewerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket                  Ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("business_approvals")
}

model DepartmentSlaPolicy {
  id                  Int        @id @default(autoincrement())
  departmentId        Int        @map("department_id")
  serviceType         String     @map("service_type") @db.VarChar(100)
  businessHoursOnly   Boolean    @default(true) @map("business_hours_only")
  responseTimeHours   Int        @map("response_time_hours")
  resolutionTimeHours Int        @map("resolution_time_hours")
  escalationRules     Json?      @map("escalation_rules")
  isActive            Boolean    @default(true) @map("is_active")
  createdAt           DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department          Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([departmentId, serviceType])
  @@map("department_sla_policies")
}

model TicketServiceFieldValue {
  id                Int                    @id @default(autoincrement())
  ticketId          Int                    @map("ticket_id")
  fieldDefinitionId Int                    @map("field_definition_id")
  value             String?
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  fieldDefinition   ServiceFieldDefinition @relation(fields: [fieldDefinitionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket            Ticket                 @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ticketId, fieldDefinitionId])
  @@map("ticket_service_field_values")
}

model TicketClassificationAudit {
  id           Int      @id @default(autoincrement())
  ticketId     Int      @map("ticket_id")
  changedBy    Int      @map("changed_by")
  fieldChanged String   @map("field_changed") @db.VarChar(100)
  oldValue     String?  @map("old_value") @db.VarChar(100)
  newValue     String?  @map("new_value") @db.VarChar(100)
  reason       String?  @db.VarChar(500)
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.VarChar(500)
  sessionId    String?  @map("session_id") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User     @relation(fields: [changedBy], references: [id], onUpdate: NoAction)
  ticket       Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticketId], map: "idx_classification_audit_ticket")
  @@index([changedBy], map: "idx_classification_audit_user")
  @@index([createdAt], map: "idx_classification_audit_date")
  @@map("ticket_classification_audit")
}

model MasterDataEntity {
  id             Int                @id @default(autoincrement())
  type           String             @db.VarChar(50)
  code           String             @db.VarChar(50)
  name           String             @db.VarChar(255)
  nameIndonesian String?            @map("name_indonesian") @db.VarChar(255)
  description    String?
  metadata       Json?
  parentId       Int?               @map("parent_id")
  departmentId   Int?               @map("department_id")
  isActive       Boolean            @default(true) @map("is_active")
  sortOrder      Int                @default(0) @map("sort_order")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department     Department?        @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent         MasterDataEntity?  @relation("MasterDataHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       MasterDataEntity[] @relation("MasterDataHierarchy")

  @@unique([type, code])
  @@index([type, isActive])
  @@index([parentId])
  @@map("master_data_entities")
}

model FieldTypeDefinition {
  id              Int      @id @default(autoincrement())
  name            String   @unique @db.VarChar(50)
  displayName     String   @map("display_name") @db.VarChar(100)
  displayNameId   String?  @map("display_name_id") @db.VarChar(100)
  category        String   @db.VarChar(50)
  description     String?
  validationRules Json?    @map("validation_rules")
  formattingRules Json?    @map("formatting_rules")
  uiConfig        Json?    @map("ui_config")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("field_type_definitions")
}

model TemplateCategory {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar(100)
  nameIndonesian String             @map("name_indonesian") @db.VarChar(100)
  description    String?
  parentId       Int?               @map("parent_id")
  departmentId   Int?               @map("department_id")
  icon           String?            @db.VarChar(50)
  color          String?            @db.VarChar(20)
  sortOrder      Int                @default(0) @map("sort_order")
  isActive       Boolean            @default(true) @map("is_active")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department     Department?        @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent         TemplateCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       TemplateCategory[] @relation("CategoryHierarchy")
  templates      TemplateMetadata[]

  @@unique([name, parentId])
  @@index([departmentId])
  @@map("template_categories")
}

model TemplateMetadata {
  id                Int              @id @default(autoincrement())
  templateId        Int?             @unique @map("template_id")
  serviceTemplateId Int?             @unique @map("service_template_id")
  categoryId        Int              @map("category_id")
  name              String           @db.VarChar(255)
  nameIndonesian    String           @map("name_indonesian") @db.VarChar(255)
  description       String?
  businessProcess   String?          @map("business_process") @db.VarChar(100)
  complexity        String           @default("medium") @db.VarChar(20)
  estimatedTime     Int              @default(30) @map("estimated_time")
  popularityScore   Float            @default(0) @map("popularity_score")
  usageCount        Int              @default(0) @map("usage_count")
  tags              String[]
  searchKeywords    String?          @map("search_keywords") @db.VarChar(500)
  searchKeywordsId  String?          @map("search_keywords_id") @db.VarChar(500)
  isPublic          Boolean          @default(true) @map("is_public")
  isActive          Boolean          @default(true) @map("is_active")
  departmentId      Int?             @map("department_id")
  createdBy         Int              @map("created_by")
  approvedBy        Int?             @map("approved_by")
  approvedAt        DateTime?        @map("approved_at") @db.Timestamptz(6)
  version           String           @default("1.0.0") @db.VarChar(20)
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  approver          User?            @relation("TemplateApprover", fields: [approvedBy], references: [id], onUpdate: NoAction)
  category          TemplateCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creator           User             @relation("TemplateCreator", fields: [createdBy], references: [id], onUpdate: NoAction)
  department        Department?      @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template          TicketTemplate?  @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([categoryId])
  @@index([popularityScore])
  @@index([departmentId])
  @@index([isActive, isPublic])
  @@map("template_metadata")
}

model TemplateUsageLog {
  id                Int              @id @default(autoincrement())
  templateId        Int?             @map("template_id")
  serviceTemplateId Int?             @map("service_template_id")
  userId            Int              @map("user_id")
  departmentId      Int?             @map("department_id")
  ticketId          Int?             @map("ticket_id")
  usageType         String           @map("usage_type") @db.VarChar(20)
  sessionId         String?          @map("session_id") @db.VarChar(255)
  ipAddress         String?          @map("ip_address") @db.VarChar(45)
  userAgent         String?          @map("user_agent") @db.VarChar(500)
  completionTime    Int?             @map("completion_time")
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  department        Department?      @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template          TicketTemplate?  @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket            Ticket?          @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User             @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([templateId])
  @@index([serviceTemplateId])
  @@index([userId])
  @@index([createdAt])
  @@map("template_usage_logs")
}

model TicketComment {
  id                Int                   @id @default(autoincrement())
  ticketId          Int                   @map("ticket_id")
  authorId          Int                   @map("author_id")
  content           String
  commentType       comment_type          @default(comment) @map("comment_type")
  isInternal        Boolean               @default(false) @map("is_internal")
  isSystemGenerated Boolean               @default(false) @map("is_system_generated")
  parentCommentId   Int?                  @map("parent_comment_id")
  mentions          Int[]
  attachments       Json?
  editedAt          DateTime?             @map("edited_at") @db.Timestamptz(6)
  editedBy          Int?                  @map("edited_by")
  isDeleted         Boolean               @default(false) @map("is_deleted")
  deletedAt         DateTime?             @map("deleted_at") @db.Timestamptz(6)
  deletedBy         Int?                  @map("deleted_by")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  notifications     CommentNotification[]
  author            User                  @relation("CommentAuthor", fields: [authorId], references: [id], onUpdate: NoAction)
  deleter           User?                 @relation("CommentDeleter", fields: [deletedBy], references: [id], onUpdate: NoAction)
  editor            User?                 @relation("CommentEditor", fields: [editedBy], references: [id], onUpdate: NoAction)
  parentComment     TicketComment?        @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies           TicketComment[]       @relation("CommentThread")
  ticket            Ticket                @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticketId])
  @@index([authorId])
  @@index([createdAt])
  @@index([parentCommentId])
  @@map("ticket_comments")
}

model CommentNotification {
  id               Int               @id @default(autoincrement())
  commentId        Int               @map("comment_id")
  recipientId      Int               @map("recipient_id")
  notificationType notification_type @map("notification_type")
  isRead           Boolean           @default(false) @map("is_read")
  readAt           DateTime?         @map("read_at") @db.Timestamptz(6)
  emailSent        Boolean           @default(false) @map("email_sent")
  emailSentAt      DateTime?         @map("email_sent_at") @db.Timestamptz(6)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  comment          TicketComment     @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient        User              @relation("NotificationRecipient", fields: [recipientId], references: [id], onUpdate: NoAction)

  @@unique([commentId, recipientId])
  @@index([recipientId, isRead])
  @@map("comment_notifications")
}

model BSGTemplateCategory {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(100)
  displayName String        @map("display_name") @db.VarChar(150)
  description String?
  icon        String?       @db.VarChar(50)
  sortOrder   Int           @default(0) @map("sort_order")
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  templates   BSGTemplate[]

  @@map("bsg_template_categories")
}

model BSGTemplate {
  id              Int                   @id @default(autoincrement())
  categoryId      Int                   @map("category_id")
  name            String                @db.VarChar(200)
  displayName     String                @map("display_name") @db.VarChar(250)
  description     String?
  templateNumber  Int?                  @map("template_number")
  isActive        Boolean               @default(true) @map("is_active")
  popularityScore Int                   @default(0) @map("popularity_score")
  usageCount      Int                   @default(0) @map("usage_count")
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  fields          BSGTemplateField[]
  usageLogs       BSGTemplateUsageLog[]
  category        BSGTemplateCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, templateNumber])
  @@index([categoryId, isActive])
  @@map("bsg_templates")
}

model BSGFieldType {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(50)
  displayName       String             @map("display_name") @db.VarChar(100)
  htmlInputType     String?            @map("html_input_type") @db.VarChar(30)
  validationPattern String?            @map("validation_pattern") @db.VarChar(500)
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  templateFields    BSGTemplateField[]

  @@map("bsg_field_types")
}

model BSGTemplateField {
  id               Int                   @id @default(autoincrement())
  templateId       Int                   @map("template_id")
  fieldTypeId      Int                   @map("field_type_id")
  fieldName        String                @map("field_name") @db.VarChar(100)
  fieldLabel       String                @map("field_label") @db.VarChar(150)
  fieldDescription String?               @map("field_description")
  isRequired       Boolean               @default(false) @map("is_required")
  maxLength        Int?                  @map("max_length")
  sortOrder        Int                   @default(0) @map("sort_order")
  placeholderText  String?               @map("placeholder_text") @db.VarChar(200)
  helpText         String?               @map("help_text") @db.VarChar(500)
  validationRules  Json?                 @map("validation_rules")
  createdAt        DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  options          BSGFieldOption[]
  fieldType        BSGFieldType          @relation(fields: [fieldTypeId], references: [id])
  template         BSGTemplate           @relation(fields: [templateId], references: [id], onDelete: Cascade)
  ticketValues     BSGTicketFieldValue[]

  @@unique([templateId, fieldName])
  @@index([templateId, sortOrder])
  @@map("bsg_template_fields")
}

model BSGMasterData {
  id                Int                   @id @default(autoincrement())
  dataType          String                @map("data_type") @db.VarChar(50)
  code              String?               @db.VarChar(50)
  name              String                @db.VarChar(200)
  displayName       String?               @map("display_name") @db.VarChar(250)
  parentId          Int?                  @map("parent_id")
  metadata          Json?
  isActive          Boolean               @default(true) @map("is_active")
  sortOrder         Int                   @default(0) @map("sort_order")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parent            BSGMasterData?        @relation("BSGMasterDataHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          BSGMasterData[]       @relation("BSGMasterDataHierarchy")
  ticketFieldValues BSGTicketFieldValue[]

  @@index([dataType, isActive])
  @@index([parentId])
  @@map("bsg_master_data")
}

model BSGFieldOption {
  id             Int              @id @default(autoincrement())
  fieldId        Int              @map("field_id")
  masterDataType String?          @map("master_data_type") @db.VarChar(50)
  optionValue    String?          @map("option_value") @db.VarChar(200)
  optionLabel    String?          @map("option_label") @db.VarChar(250)
  isDefault      Boolean          @default(false) @map("is_default")
  sortOrder      Int              @default(0) @map("sort_order")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  field          BSGTemplateField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("bsg_field_options")
}

model BSGTicketFieldValue {
  id           Int              @id @default(autoincrement())
  ticketId     Int              @map("ticket_id")
  fieldId      Int              @map("field_id")
  fieldValue   String?          @map("field_value")
  masterDataId Int?             @map("master_data_id")
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  field        BSGTemplateField @relation(fields: [fieldId], references: [id])
  masterData   BSGMasterData?   @relation(fields: [masterDataId], references: [id])
  ticket       Ticket           @relation("TicketBSGFieldValues", fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, fieldId])
  @@index([ticketId])
  @@map("bsg_ticket_field_values")
}

model BSGTemplateUsageLog {
  id               Int         @id @default(autoincrement())
  templateId       Int         @map("template_id")
  userId           Int         @map("user_id")
  departmentId     Int?        @map("department_id")
  ticketId         Int?        @map("ticket_id")
  actionType       String      @map("action_type") @db.VarChar(20)
  sessionId        String?     @map("session_id") @db.VarChar(100)
  ipAddress        String?     @map("ip_address") @db.Inet
  userAgent        String?     @map("user_agent")
  completionTimeMs Int?        @map("completion_time_ms")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  department       Department? @relation("BSGTemplateUsageDept", fields: [departmentId], references: [id])
  template         BSGTemplate @relation(fields: [templateId], references: [id])
  ticket           Ticket?     @relation("BSGTemplateUsageTicket", fields: [ticketId], references: [id])
  user             User        @relation("BSGTemplateUsageUser", fields: [userId], references: [id])

  @@index([templateId, actionType])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("bsg_template_usage_logs")
}

model AutoAssignmentRule {
  id                 Int                   @id @default(autoincrement())
  name               String                @db.VarChar(255)
  description        String?
  isActive           Boolean               @default(true) @map("is_active")
  priority           Int                   @default(0)
  templateId         Int?                  @map("template_id")
  departmentId       Int?                  @map("department_id")
  priority_level     String?               @map("priority_level") @db.VarChar(20)
  requiredSkill      String?               @map("required_skill") @db.VarChar(100)
  assignmentStrategy String                @default("skill_match") @map("assignment_strategy") @db.VarChar(50)
  respectCapacity    Boolean               @default(true) @map("respect_capacity")
  maxWorkloadPercent Int                   @default(80) @map("max_workload_percent")
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department         Department?           @relation(fields: [departmentId], references: [id])
  template           TicketTemplate?       @relation(fields: [templateId], references: [id])
  assignmentLogs     TicketAssignmentLog[]

  @@map("auto_assignment_rules")
}

model TicketAssignmentLog {
  id                 Int                 @id @default(autoincrement())
  ticketId           Int                 @map("ticket_id")
  assignedToUserId   Int?                @map("assigned_to_user_id")
  assignmentRuleId   Int?                @map("assignment_rule_id")
  assignmentMethod   String              @map("assignment_method") @db.VarChar(50)
  assignmentReason   String?             @map("assignment_reason")
  assignedByUserId   Int?                @map("assigned_by_user_id")
  previousAssigneeId Int?                @map("previous_assignee_id")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  assignedByUser     User?               @relation("AssignmentLogAssigner", fields: [assignedByUserId], references: [id])
  assignedToUser     User?               @relation("AssignmentLogAssignee", fields: [assignedToUserId], references: [id])
  assignmentRule     AutoAssignmentRule? @relation(fields: [assignmentRuleId], references: [id])
  previousAssignee   User?               @relation("AssignmentLogPrevious", fields: [previousAssigneeId], references: [id])
  ticket             Ticket              @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([assignedToUserId])
  @@index([createdAt])
  @@map("ticket_assignment_logs")
}

model ApiToken {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(255)
  description     String?
  tokenHash       String             @unique @map("token_hash") @db.VarChar(255)
  scopes          String[]
  isActive        Boolean            @default(true) @map("is_active")
  expiresAt       DateTime?          @map("expires_at") @db.Timestamptz(6)
  lastUsedAt      DateTime?          @map("last_used_at") @db.Timestamptz(6)
  usageCount      Int                @default(0) @map("usage_count")
  createdByUserId Int                @map("created_by_user_id")
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  usageLogs       ApiTokenUsageLog[]
  createdBy       User               @relation("ApiTokenCreator", fields: [createdByUserId], references: [id])

  @@index([tokenHash])
  @@index([isActive, expiresAt])
  @@map("api_tokens")
}

model ApiTokenUsageLog {
  id           Int      @id @default(autoincrement())
  tokenId      Int      @map("token_id")
  endpoint     String   @db.VarChar(255)
  method       String   @db.VarChar(10)
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  statusCode   Int      @map("status_code")
  responseTime Int?     @map("response_time")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  token        ApiToken @relation(fields: [tokenId], references: [id])

  @@index([tokenId, createdAt])
  @@map("api_token_usage_logs")
}

model bsg_global_field_definitions {
  id               Int       @id @default(autoincrement())
  field_name       String    @unique @db.VarChar(100)
  field_type       String    @db.VarChar(50)
  field_label      String    @db.VarChar(150)
  description      String?
  placeholder_text String?   @db.VarChar(200)
  help_text        String?   @db.VarChar(500)
  is_required      Boolean?  @default(false)
  max_length       Int?
  validation_rules Json?
  field_category   String?   @db.VarChar(50)
  usage_count      Int?      @default(0)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([field_category], map: "idx_global_fields_category")
  @@index([field_name], map: "idx_global_fields_name")
}

enum ticket_priority {
  low
  medium
  high
  urgent
}

enum ticket_status {
  open
  in_progress
  pending_requester_response
  resolved
  closed
  awaiting_approval
  approved
  rejected
  pending_approval           @map("pending-approval")
  awaiting_changes           @map("awaiting-changes")
  assigned
  cancelled
}

enum service_type {
  business_service
  technical_service
  government_service
}

enum request_type {
  service_request
  incident
  problem
  change_request
}

enum template_type {
  standard
  government
  kasda_specific
  internal_only
}

enum field_type {
  text
  textarea
  number
  email
  phone
  date
  datetime
  dropdown
  radio
  checkbox
  file_upload
  government_id
  budget_code
  treasury_account
}

enum business_impact {
  low
  medium
  high
  critical
}

enum approval_status {
  pending
  approved
  rejected
  review_required
}

enum root_cause_type {
  human_error
  system_error
  external_factor
  undetermined
}

enum issue_category_type {
  request
  complaint
  problem
}

enum comment_type {
  comment
  status_change
  assignment_change
  resolution
  closure
  escalation
  approval
}

enum notification_type {
  mention
  reply
  new_comment
  status_update
  assignment
}
