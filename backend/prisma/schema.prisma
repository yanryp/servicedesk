generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                         @id @default(autoincrement())
  username                 String                      @unique @db.VarChar(255)
  passwordHash             String                      @map("password_hash") @db.VarChar(255)
  email                    String                      @unique @db.VarChar(255)
  role                     String                      @db.VarChar(50)
  createdAt                DateTime?                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?                   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  managerId                Int?                        @map("manager_id")
  currentWorkload          Int                         @default(0) @map("current_workload")
  departmentId             Int?                        @map("department_id")
  experienceLevel          String?                     @map("experience_level") @db.VarChar(50)
  isAvailable              Boolean                     @default(true) @map("is_available")
  isBusinessReviewer       Boolean                     @default(false) @map("is_business_reviewer")
  isKasdaUser              Boolean                     @default(false) @map("is_kasda_user")
  name                     String?                     @db.VarChar(255)
  primarySkill             String?                     @map("primary_skill") @db.VarChar(100)
  secondarySkills          String?                     @map("secondary_skills")
  unitId                   Int?                        @map("unit_id")
  workloadCapacity         Int                         @default(10) @map("workload_capacity")
  createdApiTokens         ApiToken[]                  @relation("ApiTokenCreator")
  assetAudits              AssetAudit[]                @relation("AssetAuditor")
  assetContracts           AssetContract[]             @relation("AssetContractCreator")
  assetLifecycleEvents     AssetLifecycleEvent[]       @relation("AssetLifecycleUser")
  assetMaintenanceRecords  AssetMaintenance[]          @relation("AssetMaintenanceCreator")
  assetTransferApprovals   AssetTransfer[]             @relation("AssetTransferApprover")
  assetTransfersFrom       AssetTransfer[]             @relation("AssetTransferFromUser")
  assetTransferRequests    AssetTransfer[]             @relation("AssetTransferRequester")
  assetTransfersTo         AssetTransfer[]             @relation("AssetTransferToUser")
  assignedAssets           Asset[]                     @relation("AssetAssignedUser")
  createdAssets            Asset[]                     @relation("AssetCreator")
  bsgTemplateUsageLogs     BSGTemplateUsageLog[]       @relation("BSGTemplateUsageUser")
  businessApprovals        BusinessApproval[]          @relation("BusinessApprovalReviewer")
  ciChangeApprovals        CIChange[]                  @relation("CIChangeApprover")
  ciChangeRequests         CIChange[]                  @relation("CIChangeRequester")
  commentNotifications     CommentNotification[]       @relation("NotificationRecipient")
  createdCIs               ConfigurationItem[]         @relation("CICreator")
  ownedCIs                 ConfigurationItem[]         @relation("CIOwner")
  kasdaProfile             KasdaUserProfile?
  articleFeedbacks         KnowledgeArticleFeedback[]  @relation("ArticleFeedbackUser")
  articleViews             KnowledgeArticleView[]      @relation("ArticleViewer")
  authoredArticles         KnowledgeArticle[]          @relation("ArticleAuthor")
  editedArticles           KnowledgeArticle[]          @relation("ArticleEditor")
  knowledgeLinks           KnowledgeTicketLink[]       @relation("KnowledgeLinkCreator")
  softwareInstallations    SoftwareInstallation[]      @relation("SoftwareInstallationUser")
  approvedTemplates        TemplateMetadata[]          @relation("TemplateApprover")
  createdTemplates         TemplateMetadata[]          @relation("TemplateCreator")
  templateUsageLogs        TemplateUsageLog[]
  assignmentLogsAsAssigner TicketAssignmentLog[]       @relation("AssignmentLogAssigner")
  assignmentLogsAsAssignee TicketAssignmentLog[]       @relation("AssignmentLogAssignee")
  assignmentLogsAsPrevious TicketAssignmentLog[]       @relation("AssignmentLogPrevious")
  uploadedAttachments      TicketAttachment[]
  classificationAudits     TicketClassificationAudit[]
  authoredComments         TicketComment[]             @relation("CommentAuthor")
  deletedComments          TicketComment[]             @relation("CommentDeleter")
  editedComments           TicketComment[]             @relation("CommentEditor")
  assignedTickets          Ticket[]                    @relation("TicketAssignee")
  createdTickets           Ticket[]                    @relation("TicketCreator")
  techCategorizedTickets   Ticket[]                    @relation("TechCategorizer")
  department               Department?                 @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager                  User?                       @relation("UserManager", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates             User[]                      @relation("UserManager")
  unit                     Unit?                       @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model Department {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique @db.VarChar(255)
  description          String?
  departmentType       String                @default("internal") @map("department_type") @db.VarChar(50)
  isServiceOwner       Boolean               @default(false) @map("is_service_owner")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assetTransfersFrom   AssetTransfer[]       @relation("AssetTransferFromDept")
  assetTransfersTo     AssetTransfer[]       @relation("AssetTransferToDept")
  assignedAssets       Asset[]               @relation("AssetAssignedDept")
  autoAssignmentRules  AutoAssignmentRule[]
  bsgTemplateUsageLogs BSGTemplateUsageLog[] @relation("BSGTemplateUsageDept")
  businessHours        BusinessHoursConfig[]
  categories           Category[]
  slaPolicy            DepartmentSlaPolicy[]
  holidays             HolidayCalendar[]
  masterDataEntities   MasterDataEntity[]
  serviceCatalog       ServiceCatalog[]
  slaPolices           SlaPolicy[]
  templateCategories   TemplateCategory[]
  templateMetadata     TemplateMetadata[]
  templateUsageLogs    TemplateUsageLog[]
  units                Unit[]
  users                User[]

  @@map("departments")
}

model Unit {
  id                 Int                   @id @default(autoincrement())
  code               String                @unique @db.VarChar(50)
  name               String                @db.VarChar(255)
  displayName        String?               @map("display_name") @db.VarChar(255)
  unitType           String                @default("branch") @map("unit_type") @db.VarChar(50)
  parentId           Int?                  @map("parent_id")
  departmentId       Int?                  @map("department_id")
  isActive           Boolean               @default(true) @map("is_active")
  sortOrder          Int                   @default(0) @map("sort_order")
  metadata           Json?
  address            String?
  phone              String?               @db.VarChar(100)
  fax                String?               @db.VarChar(100)
  region             String?               @db.VarChar(100)
  province           String?               @db.VarChar(100)
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assetTransfersFrom AssetTransfer[]       @relation("AssetTransferFromLocation")
  assetTransfersTo   AssetTransfer[]       @relation("AssetTransferToLocation")
  assets             Asset[]               @relation("AssetLocation")
  businessHours      BusinessHoursConfig[]
  configurationItems ConfigurationItem[]   @relation("CILocation")
  holidays           HolidayCalendar[]
  department         Department?           @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent             Unit?                 @relation("UnitHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Unit[]                @relation("UnitHierarchy")
  users              User[]

  @@index([unitType, isActive])
  @@index([parentId])
  @@index([departmentId])
  @@map("units")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  departmentId  Int?          @map("department_id")
  department    Department?   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories SubCategory[]

  @@unique([departmentId, name])
  @@map("categories")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  categoryId Int?      @map("category_id")
  items      Item[]
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([categoryId, name])
  @@map("sub_categories")
}

model Item {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(255)
  subCategoryId Int?             @map("sub_category_id")
  subCategory   SubCategory?     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templates     TicketTemplate[]
  tickets       Ticket[]

  @@unique([subCategoryId, name])
  @@map("items")
}

model TicketTemplate {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @db.VarChar(255)
  itemId                 Int?                    @map("item_id")
  description            String?
  autoAssignmentRules    AutoAssignmentRule[]
  customFieldDefinitions CustomFieldDefinition[]
  metadata               TemplateMetadata?
  usageLogs              TemplateUsageLog[]
  item                   Item?                   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tickets                Ticket[]

  @@unique([itemId, name])
  @@map("ticket_templates")
}

model CustomFieldDefinition {
  id                      Int                      @id @default(autoincrement())
  templateId              Int?                     @map("template_id")
  fieldName               String                   @map("field_name") @db.VarChar(255)
  fieldLabel              String?                  @map("field_label") @db.VarChar(255)
  fieldType               String                   @map("field_type") @db.VarChar(50)
  options                 Json?
  isRequired              Boolean?                 @default(false) @map("is_required")
  placeholder             String?
  default_value           String?
  template                TicketTemplate?          @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticketCustomFieldValues TicketCustomFieldValue[]

  @@unique([templateId, fieldName])
  @@map("custom_field_definitions")
}

model Ticket {
  id                       Int                         @id @default(autoincrement())
  title                    String                      @db.VarChar(255)
  description              String
  status                   ticket_status               @default(open)
  priority                 ticket_priority             @default(medium)
  createdByUserId          Int                         @map("created_by_user_id")
  assignedToUserId         Int?                        @map("assigned_to_user_id")
  createdAt                DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resolvedAt               DateTime?                   @map("resolved_at") @db.Timestamptz(6)
  slaDueDate               DateTime?                   @map("sla_due_date") @db.Timestamptz(6)
  itemId                   Int?                        @map("item_id")
  templateId               Int?                        @map("template_id")
  managerComments          String?                     @map("manager_comments")
  businessComments         String?                     @map("business_comments")
  businessImpact           business_impact             @default(medium) @map("business_impact")
  confirmedIssueCategory   issue_category_type?        @map("confirmed_issue_category")
  confirmedRootCause       root_cause_type?            @map("confirmed_root_cause")
  governmentEntityId       Int?                        @map("government_entity_id")
  isClassificationLocked   Boolean                     @default(false) @map("is_classification_locked")
  isKasdaTicket            Boolean                     @default(false) @map("is_kasda_ticket")
  requestType              request_type                @default(service_request) @map("request_type")
  requiresBusinessApproval Boolean                     @default(false) @map("requires_business_approval")
  serviceCatalogId         Int?                        @map("service_catalog_id")
  serviceItemId            Int?                        @map("service_item_id")
  serviceTemplateId        Int?                        @map("service_template_id")
  techCategorizedAt        DateTime?                   @map("tech_categorized_at") @db.Timestamptz(6)
  techCategorizedBy        Int?                        @map("tech_categorized_by")
  techIssueCategory        issue_category_type?        @map("tech_issue_category")
  techOverrideReason       String?                     @map("tech_override_reason") @db.VarChar(500)
  techRootCause            root_cause_type?            @map("tech_root_cause")
  userCategorizedAt        DateTime?                   @map("user_categorized_at") @db.Timestamptz(6)
  userCategorizedIP        String?                     @map("user_categorized_ip") @db.VarChar(45)
  userIssueCategory        issue_category_type?        @map("user_issue_category")
  userRootCause            root_cause_type?            @map("user_root_cause")
  bsgUsageLogs             BSGTemplateUsageLog[]       @relation("BSGTemplateUsageTicket")
  bsgFieldValues           BSGTicketFieldValue[]       @relation("TicketBSGFieldValues")
  businessApproval         BusinessApproval?
  ciIncidents              CIIncident[]
  escalationInstances      EscalationInstance[]
  knowledgeLinks           KnowledgeTicketLink[]
  templateUsageLogs        TemplateUsageLog[]
  assignmentLogs           TicketAssignmentLog[]
  attachments              TicketAttachment[]
  classificationAudit      TicketClassificationAudit[]
  comments                 TicketComment[]
  customFieldValues        TicketCustomFieldValue[]
  serviceFieldValues       TicketServiceFieldValue[]
  assignedTo               User?                       @relation("TicketAssignee", fields: [assignedToUserId], references: [id], onUpdate: NoAction)
  createdBy                User                        @relation("TicketCreator", fields: [createdByUserId], references: [id], onUpdate: NoAction)
  governmentEntity         GovernmentEntity?           @relation("GovernmentEntityTickets", fields: [governmentEntityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item                     Item?                       @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceCatalog           ServiceCatalog?             @relation("ServiceCatalogTickets", fields: [serviceCatalogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceItem              ServiceItem?                @relation("ServiceItemTickets", fields: [serviceItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate          ServiceTemplate?            @relation("ServiceTemplateTickets", fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  techCategorizedByUser    User?                       @relation("TechCategorizer", fields: [techCategorizedBy], references: [id], onUpdate: NoAction)
  template                 TicketTemplate?             @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relatedAssets            Asset[]                     @relation("TicketAsset")

  @@map("tickets")
}

model TicketAttachment {
  id               Int       @id @default(autoincrement())
  ticketId         Int       @map("ticket_id")
  fileName         String    @map("file_name") @db.VarChar(255)
  filePath         String    @map("file_path") @db.VarChar(255)
  fileSize         Int       @map("file_size")
  fileType         String?   @map("file_type") @db.VarChar(100)
  uploadedByUserId Int?      @map("uploaded_by_user_id")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  ticket           Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploadedBy       User?     @relation(fields: [uploadedByUserId], references: [id], onUpdate: NoAction)

  @@index([ticketId], map: "idx_ticket_attachments_ticket_id")
  @@map("ticket_attachments")
}

model TicketCustomFieldValue {
  id                Int                   @id @default(autoincrement())
  ticketId          Int                   @map("ticket_id")
  fieldDefinitionId Int                   @map("field_definition_id")
  value             String?
  fieldDefinition   CustomFieldDefinition @relation(fields: [fieldDefinitionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket            Ticket                @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ticketId, fieldDefinitionId])
  @@map("ticket_custom_field_values")
}

model ServiceCatalog {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  description      String?
  serviceType      service_type     @default(business_service) @map("service_type")
  categoryLevel    Int              @default(1) @map("category_level")
  parentId         Int?             @map("parent_id")
  departmentId     Int              @map("department_id")
  isActive         Boolean          @default(true) @map("is_active")
  requiresApproval Boolean          @default(false) @map("requires_approval")
  estimatedTime    Int?             @map("estimated_time")
  businessImpact   business_impact  @default(medium) @map("business_impact")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department       Department       @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent           ServiceCatalog?  @relation("ServiceHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children         ServiceCatalog[] @relation("ServiceHierarchy")
  serviceItems     ServiceItem[]
  slaPolicies      SlaPolicy[]
  tickets          Ticket[]         @relation("ServiceCatalogTickets")

  @@unique([departmentId, name])
  @@map("service_catalog")
}

model ServiceItem {
  id                        Int                      @id @default(autoincrement())
  serviceCatalogId          Int                      @map("service_catalog_id")
  name                      String                   @db.VarChar(255)
  description               String?
  requestType               request_type             @default(service_request) @map("request_type")
  isKasdaRelated            Boolean                  @default(false) @map("is_kasda_related")
  requiresGovApproval       Boolean                  @default(false) @map("requires_gov_approval")
  isActive                  Boolean                  @default(true) @map("is_active")
  sortOrder                 Int                      @default(0) @map("sort_order")
  createdAt                 DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  service_field_definitions ServiceFieldDefinition[]
  serviceCatalog            ServiceCatalog           @relation(fields: [serviceCatalogId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templates                 ServiceTemplate[]
  slaPolicies               SlaPolicy[]
  tickets                   Ticket[]                 @relation("ServiceItemTickets")

  @@unique([serviceCatalogId, name])
  @@map("service_items")
}

model ServiceTemplate {
  id                       Int                      @id @default(autoincrement())
  serviceItemId            Int                      @map("service_item_id")
  name                     String                   @db.VarChar(255)
  description              String?
  templateType             template_type            @default(standard) @map("template_type")
  isKasdaTemplate          Boolean                  @default(false) @map("is_kasda_template")
  requiresBusinessApproval Boolean                  @default(false) @map("requires_business_approval")
  isVisible                Boolean                  @default(true) @map("is_visible")
  sortOrder                Int                      @default(0) @map("sort_order")
  estimatedResolutionTime  Int?                     @map("estimated_resolution_time")
  defaultRootCause         root_cause_type?         @map("default_root_cause")
  defaultIssueType         issue_category_type?     @map("default_issue_type")
  createdAt                DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  customFieldDefinitions   ServiceFieldDefinition[]
  serviceItem              ServiceItem              @relation(fields: [serviceItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  metadata                 TemplateMetadata?
  usageLogs                TemplateUsageLog[]
  tickets                  Ticket[]                 @relation("ServiceTemplateTickets")

  @@unique([serviceItemId, name])
  @@map("service_templates")
}

model ServiceFieldDefinition {
  id                Int                       @id @default(autoincrement())
  serviceTemplateId Int?                      @map("service_template_id")
  service_item_id   Int?
  fieldName         String                    @map("field_name") @db.VarChar(255)
  fieldLabel        String                    @map("field_label") @db.VarChar(255)
  fieldType         field_type                @map("field_type")
  options           Json?
  isRequired        Boolean                   @default(false) @map("is_required")
  isKasdaSpecific   Boolean                   @default(false) @map("is_kasda_specific")
  placeholder       String?
  defaultValue      String?                   @map("default_value")
  validationRules   Json?                     @map("validation_rules")
  sortOrder         Int                       @default(0) @map("sort_order")
  isVisible         Boolean                   @default(true) @map("is_visible")
  createdAt         DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  service_items     ServiceItem?              @relation(fields: [service_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  serviceTemplate   ServiceTemplate?          @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticketFieldValues TicketServiceFieldValue[]

  @@unique([serviceTemplateId, fieldName])
  @@unique([service_item_id, fieldName])
  @@map("service_field_definitions")
}

model GovernmentEntity {
  id            Int                @id @default(autoincrement())
  entityName    String             @map("entity_name") @db.VarChar(255)
  entityType    String             @map("entity_type") @db.VarChar(100)
  entityLevel   String             @map("entity_level") @db.VarChar(50)
  contactPerson String?            @map("contact_person") @db.VarChar(255)
  contactEmail  String?            @map("contact_email") @db.VarChar(255)
  contactPhone  String?            @map("contact_phone") @db.VarChar(50)
  address       String?
  isActive      Boolean            @default(true) @map("is_active")
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  kasdaUsers    KasdaUserProfile[]
  tickets       Ticket[]           @relation("GovernmentEntityTickets")

  @@map("government_entities")
}

model KasdaUserProfile {
  id                    Int              @id @default(autoincrement())
  userId                Int              @unique @map("user_id")
  governmentEntityId    Int              @map("government_entity_id")
  positionTitle         String           @map("position_title") @db.VarChar(255)
  authorityLevel        String           @map("authority_level") @db.VarChar(100)
  treasuryAccountAccess String[]         @map("treasury_account_access")
  budgetCodes           String[]         @map("budget_codes")
  fiscalYear            Int              @map("fiscal_year")
  governmentIdNumber    String?          @map("government_id_number") @db.VarChar(100)
  isActive              Boolean          @default(true) @map("is_active")
  createdAt             DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  governmentEntity      GovernmentEntity @relation(fields: [governmentEntityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("kasda_user_profiles")
}

model BusinessApproval {
  id                      Int             @id @default(autoincrement())
  ticketId                Int             @unique @map("ticket_id")
  businessReviewerId      Int             @map("business_reviewer_id")
  approvalStatus          approval_status @default(pending) @map("approval_status")
  businessComments        String?         @map("business_comments")
  govDocsVerified         Boolean         @default(false) @map("gov_docs_verified")
  authorizationLetterPath String?         @map("authorization_letter_path")
  approvedAt              DateTime?       @map("approved_at") @db.Timestamptz(6)
  createdAt               DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  businessReviewer        User            @relation("BusinessApprovalReviewer", fields: [businessReviewerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket                  Ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("business_approvals")
}

model DepartmentSlaPolicy {
  id                  Int        @id @default(autoincrement())
  departmentId        Int        @map("department_id")
  serviceType         String     @map("service_type") @db.VarChar(100)
  businessHoursOnly   Boolean    @default(true) @map("business_hours_only")
  responseTimeHours   Int        @map("response_time_hours")
  resolutionTimeHours Int        @map("resolution_time_hours")
  escalationRules     Json?      @map("escalation_rules")
  isActive            Boolean    @default(true) @map("is_active")
  createdAt           DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department          Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([departmentId, serviceType])
  @@map("department_sla_policies")
}

model BusinessHoursConfig {
  id           Int         @id @default(autoincrement())
  departmentId Int?        @map("department_id")
  unitId       Int?        @map("unit_id")
  dayOfWeek    Int         @map("day_of_week")
  startTime    String      @map("start_time") @db.VarChar(5)
  endTime      String      @map("end_time") @db.VarChar(5)
  isActive     Boolean     @default(true) @map("is_active")
  timezone     String      @default("Asia/Jakarta") @db.VarChar(50)
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  unit         Unit?       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([departmentId, unitId, dayOfWeek])
  @@index([departmentId])
  @@index([unitId])
  @@map("business_hours_config")
}

model HolidayCalendar {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  date           DateTime    @db.Date
  description    String?
  isRecurring    Boolean     @default(false) @map("is_recurring")
  recurrenceRule String?     @map("recurrence_rule") @db.VarChar(255)
  departmentId   Int?        @map("department_id")
  unitId         Int?        @map("unit_id")
  isActive       Boolean     @default(true) @map("is_active")
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department     Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  unit           Unit?       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([name, date, departmentId, unitId])
  @@index([date])
  @@index([departmentId])
  @@index([unitId])
  @@map("holiday_calendar")
}

model SlaPolicy {
  id                    Int                  @id @default(autoincrement())
  name                  String               @db.VarChar(255)
  description           String?
  serviceCatalogId      Int?                 @map("service_catalog_id")
  serviceItemId         Int?                 @map("service_item_id")
  departmentId          Int?                 @map("department_id")
  priority              ticket_priority?
  isKasdaSpecific       Boolean              @default(false) @map("is_kasda_specific")
  responseTimeMinutes   Int                  @map("response_time_minutes")
  resolutionTimeMinutes Int                  @map("resolution_time_minutes")
  businessHoursOnly     Boolean              @default(true) @map("business_hours_only")
  escalationMatrix      Json?                @map("escalation_matrix")
  notificationRules     Json?                @map("notification_rules")
  isActive              Boolean              @default(true) @map("is_active")
  effectiveFrom         DateTime             @default(now()) @map("effective_from") @db.Timestamptz(6)
  effectiveTo           DateTime?            @map("effective_to") @db.Timestamptz(6)
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  escalationInstances   EscalationInstance[]
  department            Department?          @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  serviceCatalog        ServiceCatalog?      @relation(fields: [serviceCatalogId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  serviceItem           ServiceItem?         @relation(fields: [serviceItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([serviceCatalogId])
  @@index([serviceItemId])
  @@index([departmentId])
  @@index([priority])
  @@index([effectiveFrom, effectiveTo])
  @@map("sla_policies")
}

model EscalationInstance {
  id              Int               @id @default(autoincrement())
  ticketId        Int               @map("ticket_id")
  slaPolicyId     Int               @map("sla_policy_id")
  escalationLevel Int               @map("escalation_level")
  triggeredAt     DateTime          @map("triggered_at") @db.Timestamptz(6)
  resolvedAt      DateTime?         @map("resolved_at") @db.Timestamptz(6)
  notifiedUsers   Json?             @map("notified_users")
  escalationData  Json?             @map("escalation_data")
  status          escalation_status @default(active)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  slaPolicy       SlaPolicy         @relation(fields: [slaPolicyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket          Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticketId])
  @@index([slaPolicyId])
  @@index([triggeredAt])
  @@index([status])
  @@map("escalation_instances")
}

model TicketServiceFieldValue {
  id                Int                    @id @default(autoincrement())
  ticketId          Int                    @map("ticket_id")
  fieldDefinitionId Int                    @map("field_definition_id")
  value             String?
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  fieldDefinition   ServiceFieldDefinition @relation(fields: [fieldDefinitionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket            Ticket                 @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ticketId, fieldDefinitionId])
  @@map("ticket_service_field_values")
}

model TicketClassificationAudit {
  id           Int      @id @default(autoincrement())
  ticketId     Int      @map("ticket_id")
  changedBy    Int      @map("changed_by")
  fieldChanged String   @map("field_changed") @db.VarChar(100)
  oldValue     String?  @map("old_value") @db.VarChar(100)
  newValue     String?  @map("new_value") @db.VarChar(100)
  reason       String?  @db.VarChar(500)
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.VarChar(500)
  sessionId    String?  @map("session_id") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User     @relation(fields: [changedBy], references: [id], onUpdate: NoAction)
  ticket       Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticketId], map: "idx_classification_audit_ticket")
  @@index([changedBy], map: "idx_classification_audit_user")
  @@index([createdAt], map: "idx_classification_audit_date")
  @@map("ticket_classification_audit")
}

model MasterDataEntity {
  id             Int                @id @default(autoincrement())
  type           String             @db.VarChar(50)
  code           String             @db.VarChar(50)
  name           String             @db.VarChar(255)
  nameIndonesian String?            @map("name_indonesian") @db.VarChar(255)
  description    String?
  metadata       Json?
  parentId       Int?               @map("parent_id")
  departmentId   Int?               @map("department_id")
  isActive       Boolean            @default(true) @map("is_active")
  sortOrder      Int                @default(0) @map("sort_order")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department     Department?        @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent         MasterDataEntity?  @relation("MasterDataHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       MasterDataEntity[] @relation("MasterDataHierarchy")

  @@unique([type, code])
  @@index([type, isActive])
  @@index([parentId])
  @@map("master_data_entities")
}

model FieldTypeDefinition {
  id              Int      @id @default(autoincrement())
  name            String   @unique @db.VarChar(50)
  displayName     String   @map("display_name") @db.VarChar(100)
  displayNameId   String?  @map("display_name_id") @db.VarChar(100)
  category        String   @db.VarChar(50)
  description     String?
  validationRules Json?    @map("validation_rules")
  formattingRules Json?    @map("formatting_rules")
  uiConfig        Json?    @map("ui_config")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("field_type_definitions")
}

model TemplateCategory {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar(100)
  nameIndonesian String             @map("name_indonesian") @db.VarChar(100)
  description    String?
  parentId       Int?               @map("parent_id")
  departmentId   Int?               @map("department_id")
  icon           String?            @db.VarChar(50)
  color          String?            @db.VarChar(20)
  sortOrder      Int                @default(0) @map("sort_order")
  isActive       Boolean            @default(true) @map("is_active")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department     Department?        @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent         TemplateCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       TemplateCategory[] @relation("CategoryHierarchy")
  templates      TemplateMetadata[]

  @@unique([name, parentId])
  @@index([departmentId])
  @@map("template_categories")
}

model TemplateMetadata {
  id                Int              @id @default(autoincrement())
  templateId        Int?             @unique @map("template_id")
  serviceTemplateId Int?             @unique @map("service_template_id")
  categoryId        Int              @map("category_id")
  name              String           @db.VarChar(255)
  nameIndonesian    String           @map("name_indonesian") @db.VarChar(255)
  description       String?
  businessProcess   String?          @map("business_process") @db.VarChar(100)
  complexity        String           @default("medium") @db.VarChar(20)
  estimatedTime     Int              @default(30) @map("estimated_time")
  popularityScore   Float            @default(0) @map("popularity_score")
  usageCount        Int              @default(0) @map("usage_count")
  tags              String[]
  searchKeywords    String?          @map("search_keywords") @db.VarChar(500)
  searchKeywordsId  String?          @map("search_keywords_id") @db.VarChar(500)
  isPublic          Boolean          @default(true) @map("is_public")
  isActive          Boolean          @default(true) @map("is_active")
  departmentId      Int?             @map("department_id")
  createdBy         Int              @map("created_by")
  approvedBy        Int?             @map("approved_by")
  approvedAt        DateTime?        @map("approved_at") @db.Timestamptz(6)
  version           String           @default("1.0.0") @db.VarChar(20)
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  approver          User?            @relation("TemplateApprover", fields: [approvedBy], references: [id], onUpdate: NoAction)
  category          TemplateCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creator           User             @relation("TemplateCreator", fields: [createdBy], references: [id], onUpdate: NoAction)
  department        Department?      @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template          TicketTemplate?  @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([categoryId])
  @@index([popularityScore])
  @@index([departmentId])
  @@index([isActive, isPublic])
  @@map("template_metadata")
}

model TemplateUsageLog {
  id                Int              @id @default(autoincrement())
  templateId        Int?             @map("template_id")
  serviceTemplateId Int?             @map("service_template_id")
  userId            Int              @map("user_id")
  departmentId      Int?             @map("department_id")
  ticketId          Int?             @map("ticket_id")
  usageType         String           @map("usage_type") @db.VarChar(20)
  sessionId         String?          @map("session_id") @db.VarChar(255)
  ipAddress         String?          @map("ip_address") @db.VarChar(45)
  userAgent         String?          @map("user_agent") @db.VarChar(500)
  completionTime    Int?             @map("completion_time")
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  department        Department?      @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template          TicketTemplate?  @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket            Ticket?          @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User             @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([templateId])
  @@index([serviceTemplateId])
  @@index([userId])
  @@index([createdAt])
  @@map("template_usage_logs")
}

model TicketComment {
  id                Int                   @id @default(autoincrement())
  ticketId          Int                   @map("ticket_id")
  authorId          Int                   @map("author_id")
  content           String
  commentType       comment_type          @default(comment) @map("comment_type")
  isInternal        Boolean               @default(false) @map("is_internal")
  isSystemGenerated Boolean               @default(false) @map("is_system_generated")
  parentCommentId   Int?                  @map("parent_comment_id")
  mentions          Int[]
  attachments       Json?
  editedAt          DateTime?             @map("edited_at") @db.Timestamptz(6)
  editedBy          Int?                  @map("edited_by")
  isDeleted         Boolean               @default(false) @map("is_deleted")
  deletedAt         DateTime?             @map("deleted_at") @db.Timestamptz(6)
  deletedBy         Int?                  @map("deleted_by")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  notifications     CommentNotification[]
  author            User                  @relation("CommentAuthor", fields: [authorId], references: [id], onUpdate: NoAction)
  deleter           User?                 @relation("CommentDeleter", fields: [deletedBy], references: [id], onUpdate: NoAction)
  editor            User?                 @relation("CommentEditor", fields: [editedBy], references: [id], onUpdate: NoAction)
  parentComment     TicketComment?        @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies           TicketComment[]       @relation("CommentThread")
  ticket            Ticket                @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticketId])
  @@index([authorId])
  @@index([createdAt])
  @@index([parentCommentId])
  @@map("ticket_comments")
}

model CommentNotification {
  id               Int               @id @default(autoincrement())
  commentId        Int               @map("comment_id")
  recipientId      Int               @map("recipient_id")
  notificationType notification_type @map("notification_type")
  isRead           Boolean           @default(false) @map("is_read")
  readAt           DateTime?         @map("read_at") @db.Timestamptz(6)
  emailSent        Boolean           @default(false) @map("email_sent")
  emailSentAt      DateTime?         @map("email_sent_at") @db.Timestamptz(6)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  comment          TicketComment     @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient        User              @relation("NotificationRecipient", fields: [recipientId], references: [id], onUpdate: NoAction)

  @@unique([commentId, recipientId])
  @@index([recipientId, isRead])
  @@map("comment_notifications")
}

model BSGTemplateCategory {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(100)
  displayName String        @map("display_name") @db.VarChar(150)
  description String?
  icon        String?       @db.VarChar(50)
  sortOrder   Int           @default(0) @map("sort_order")
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  templates   BSGTemplate[]

  @@map("bsg_template_categories")
}

model BSGTemplate {
  id              Int                   @id @default(autoincrement())
  categoryId      Int                   @map("category_id")
  name            String                @db.VarChar(200)
  displayName     String                @map("display_name") @db.VarChar(250)
  description     String?
  templateNumber  Int?                  @map("template_number")
  isActive        Boolean               @default(true) @map("is_active")
  popularityScore Int                   @default(0) @map("popularity_score")
  usageCount      Int                   @default(0) @map("usage_count")
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  fields          BSGTemplateField[]
  usageLogs       BSGTemplateUsageLog[]
  category        BSGTemplateCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, templateNumber])
  @@index([categoryId, isActive])
  @@map("bsg_templates")
}

model BSGFieldType {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(50)
  displayName       String             @map("display_name") @db.VarChar(100)
  htmlInputType     String?            @map("html_input_type") @db.VarChar(30)
  validationPattern String?            @map("validation_pattern") @db.VarChar(500)
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  templateFields    BSGTemplateField[]

  @@map("bsg_field_types")
}

model BSGTemplateField {
  id               Int                   @id @default(autoincrement())
  templateId       Int                   @map("template_id")
  fieldTypeId      Int                   @map("field_type_id")
  fieldName        String                @map("field_name") @db.VarChar(100)
  fieldLabel       String                @map("field_label") @db.VarChar(150)
  fieldDescription String?               @map("field_description")
  isRequired       Boolean               @default(false) @map("is_required")
  maxLength        Int?                  @map("max_length")
  sortOrder        Int                   @default(0) @map("sort_order")
  placeholderText  String?               @map("placeholder_text") @db.VarChar(200)
  helpText         String?               @map("help_text") @db.VarChar(500)
  validationRules  Json?                 @map("validation_rules")
  createdAt        DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  options          BSGFieldOption[]
  fieldType        BSGFieldType          @relation(fields: [fieldTypeId], references: [id])
  template         BSGTemplate           @relation(fields: [templateId], references: [id], onDelete: Cascade)
  ticketValues     BSGTicketFieldValue[]

  @@unique([templateId, fieldName])
  @@index([templateId, sortOrder])
  @@map("bsg_template_fields")
}

model BSGMasterData {
  id                Int                   @id @default(autoincrement())
  dataType          String                @map("data_type") @db.VarChar(50)
  code              String?               @db.VarChar(50)
  name              String                @db.VarChar(200)
  displayName       String?               @map("display_name") @db.VarChar(250)
  parentId          Int?                  @map("parent_id")
  metadata          Json?
  isActive          Boolean               @default(true) @map("is_active")
  sortOrder         Int                   @default(0) @map("sort_order")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parent            BSGMasterData?        @relation("BSGMasterDataHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          BSGMasterData[]       @relation("BSGMasterDataHierarchy")
  ticketFieldValues BSGTicketFieldValue[]

  @@index([dataType, isActive])
  @@index([parentId])
  @@map("bsg_master_data")
}

model BSGFieldOption {
  id             Int              @id @default(autoincrement())
  fieldId        Int              @map("field_id")
  masterDataType String?          @map("master_data_type") @db.VarChar(50)
  optionValue    String?          @map("option_value") @db.VarChar(200)
  optionLabel    String?          @map("option_label") @db.VarChar(250)
  isDefault      Boolean          @default(false) @map("is_default")
  sortOrder      Int              @default(0) @map("sort_order")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  field          BSGTemplateField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("bsg_field_options")
}

model BSGTicketFieldValue {
  id           Int              @id @default(autoincrement())
  ticketId     Int              @map("ticket_id")
  fieldId      Int              @map("field_id")
  fieldValue   String?          @map("field_value")
  masterDataId Int?             @map("master_data_id")
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  field        BSGTemplateField @relation(fields: [fieldId], references: [id])
  masterData   BSGMasterData?   @relation(fields: [masterDataId], references: [id])
  ticket       Ticket           @relation("TicketBSGFieldValues", fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, fieldId])
  @@index([ticketId])
  @@map("bsg_ticket_field_values")
}

model BSGTemplateUsageLog {
  id               Int         @id @default(autoincrement())
  templateId       Int         @map("template_id")
  userId           Int         @map("user_id")
  departmentId     Int?        @map("department_id")
  ticketId         Int?        @map("ticket_id")
  actionType       String      @map("action_type") @db.VarChar(20)
  sessionId        String?     @map("session_id") @db.VarChar(100)
  ipAddress        String?     @map("ip_address") @db.Inet
  userAgent        String?     @map("user_agent")
  completionTimeMs Int?        @map("completion_time_ms")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  department       Department? @relation("BSGTemplateUsageDept", fields: [departmentId], references: [id])
  template         BSGTemplate @relation(fields: [templateId], references: [id])
  ticket           Ticket?     @relation("BSGTemplateUsageTicket", fields: [ticketId], references: [id])
  user             User        @relation("BSGTemplateUsageUser", fields: [userId], references: [id])

  @@index([templateId, actionType])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("bsg_template_usage_logs")
}

model AutoAssignmentRule {
  id                 Int                   @id @default(autoincrement())
  name               String                @db.VarChar(255)
  description        String?
  isActive           Boolean               @default(true) @map("is_active")
  priority           Int                   @default(0)
  templateId         Int?                  @map("template_id")
  departmentId       Int?                  @map("department_id")
  priority_level     String?               @map("priority_level") @db.VarChar(20)
  requiredSkill      String?               @map("required_skill") @db.VarChar(100)
  assignmentStrategy String                @default("skill_match") @map("assignment_strategy") @db.VarChar(50)
  respectCapacity    Boolean               @default(true) @map("respect_capacity")
  maxWorkloadPercent Int                   @default(80) @map("max_workload_percent")
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  department         Department?           @relation(fields: [departmentId], references: [id])
  template           TicketTemplate?       @relation(fields: [templateId], references: [id])
  assignmentLogs     TicketAssignmentLog[]

  @@map("auto_assignment_rules")
}

model TicketAssignmentLog {
  id                 Int                 @id @default(autoincrement())
  ticketId           Int                 @map("ticket_id")
  assignedToUserId   Int?                @map("assigned_to_user_id")
  assignmentRuleId   Int?                @map("assignment_rule_id")
  assignmentMethod   String              @map("assignment_method") @db.VarChar(50)
  assignmentReason   String?             @map("assignment_reason")
  assignedByUserId   Int?                @map("assigned_by_user_id")
  previousAssigneeId Int?                @map("previous_assignee_id")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  assignedByUser     User?               @relation("AssignmentLogAssigner", fields: [assignedByUserId], references: [id])
  assignedToUser     User?               @relation("AssignmentLogAssignee", fields: [assignedToUserId], references: [id])
  assignmentRule     AutoAssignmentRule? @relation(fields: [assignmentRuleId], references: [id])
  previousAssignee   User?               @relation("AssignmentLogPrevious", fields: [previousAssigneeId], references: [id])
  ticket             Ticket              @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([assignedToUserId])
  @@index([createdAt])
  @@map("ticket_assignment_logs")
}

model ApiToken {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(255)
  description     String?
  tokenHash       String             @unique @map("token_hash") @db.VarChar(255)
  scopes          String[]
  isActive        Boolean            @default(true) @map("is_active")
  expiresAt       DateTime?          @map("expires_at") @db.Timestamptz(6)
  lastUsedAt      DateTime?          @map("last_used_at") @db.Timestamptz(6)
  usageCount      Int                @default(0) @map("usage_count")
  createdByUserId Int                @map("created_by_user_id")
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  usageLogs       ApiTokenUsageLog[]
  createdBy       User               @relation("ApiTokenCreator", fields: [createdByUserId], references: [id])

  @@index([tokenHash])
  @@index([isActive, expiresAt])
  @@map("api_tokens")
}

model ApiTokenUsageLog {
  id           Int      @id @default(autoincrement())
  tokenId      Int      @map("token_id")
  endpoint     String   @db.VarChar(255)
  method       String   @db.VarChar(10)
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  statusCode   Int      @map("status_code")
  responseTime Int?     @map("response_time")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  token        ApiToken @relation(fields: [tokenId], references: [id])

  @@index([tokenId, createdAt])
  @@map("api_token_usage_logs")
}

model bsg_global_field_definitions {
  id               Int       @id @default(autoincrement())
  field_name       String    @unique @db.VarChar(100)
  field_type       String    @db.VarChar(50)
  field_label      String    @db.VarChar(150)
  description      String?
  placeholder_text String?   @db.VarChar(200)
  help_text        String?   @db.VarChar(500)
  is_required      Boolean?  @default(false)
  max_length       Int?
  validation_rules Json?
  field_category   String?   @db.VarChar(50)
  usage_count      Int?      @default(0)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([field_category], map: "idx_global_fields_category")
  @@index([field_name], map: "idx_global_fields_name")
}

model AssetType {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(100)
  description        String?
  category           String               @db.VarChar(50)
  icon               String?              @db.VarChar(50)
  isActive           Boolean              @default(true) @map("is_active")
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assetAttributes    AssetTypeAttribute[]
  assets             Asset[]
  configurationItems ConfigurationItem[]

  @@map("asset_types")
}

model AssetTypeAttribute {
  id              Int                   @id @default(autoincrement())
  assetTypeId     Int                   @map("asset_type_id")
  name            String                @db.VarChar(100)
  label           String                @db.VarChar(150)
  fieldType       field_type            @map("field_type")
  isRequired      Boolean               @default(false) @map("is_required")
  options         Json?
  validation      Json?
  sortOrder       Int                   @default(0) @map("sort_order")
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  assetAttributes AssetAttributeValue[]
  assetType       AssetType             @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)

  @@unique([assetTypeId, name])
  @@map("asset_type_attributes")
}

model Asset {
  id                    Int                    @id @default(autoincrement())
  assetTag              String                 @unique @db.VarChar(50)
  name                  String                 @db.VarChar(255)
  description           String?
  assetTypeId           Int                    @map("asset_type_id")
  serialNumber          String?                @db.VarChar(100)
  model                 String?                @db.VarChar(100)
  manufacturer          String?                @db.VarChar(100)
  status                asset_status           @default(received)
  condition             asset_condition        @default(new)
  locationId            Int?                   @map("location_id")
  assignedToUserId      Int?                   @map("assigned_to_user_id")
  assignedToDeptId      Int?                   @map("assigned_to_dept_id")
  purchasePrice         Decimal?               @map("purchase_price") @db.Decimal(12, 2)
  purchaseDate          DateTime?              @map("purchase_date") @db.Date
  warrantyExpiry        DateTime?              @map("warranty_expiry") @db.Date
  depreciationRate      Decimal?               @map("depreciation_rate") @db.Decimal(5, 2)
  currentValue          Decimal?               @map("current_value") @db.Decimal(12, 2)
  vendorId              Int?                   @map("vendor_id")
  purchaseOrderNum      String?                @map("purchase_order_num") @db.VarChar(50)
  deploymentDate        DateTime?              @map("deployment_date") @db.Date
  retirementDate        DateTime?              @map("retirement_date") @db.Date
  disposalDate          DateTime?              @map("disposal_date") @db.Date
  notes                 String?
  customFields          Json?                  @map("custom_fields")
  createdByUserId       Int                    @map("created_by_user_id")
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assetAttributes       AssetAttributeValue[]
  audits                AssetAudit[]
  contracts             AssetContract[]
  lifecycleEvents       AssetLifecycleEvent[]
  maintenanceRecords    AssetMaintenance[]
  childRelationships    AssetRelationship[]    @relation("AssetChild")
  relationships         AssetRelationship[]    @relation("AssetParent")
  transfers             AssetTransfer[]
  assetType             AssetType              @relation(fields: [assetTypeId], references: [id])
  assignedToDept        Department?            @relation("AssetAssignedDept", fields: [assignedToDeptId], references: [id])
  assignedToUser        User?                  @relation("AssetAssignedUser", fields: [assignedToUserId], references: [id])
  createdBy             User                   @relation("AssetCreator", fields: [createdByUserId], references: [id])
  location              Unit?                  @relation("AssetLocation", fields: [locationId], references: [id])
  vendor                AssetVendor?           @relation(fields: [vendorId], references: [id])
  configurationItems    ConfigurationItem[]
  softwareAssets        SoftwareAsset[]
  softwareInstallations SoftwareInstallation[]
  tickets               Ticket[]               @relation("TicketAsset")

  @@index([assetTag])
  @@index([status])
  @@index([assetTypeId])
  @@index([locationId])
  @@index([assignedToUserId])
  @@map("assets")
}

model AssetAttributeValue {
  id          Int                @id @default(autoincrement())
  assetId     Int                @map("asset_id")
  attributeId Int                @map("attribute_id")
  value       String?
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  asset       Asset              @relation(fields: [assetId], references: [id], onDelete: Cascade)
  attribute   AssetTypeAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([assetId, attributeId])
  @@map("asset_attribute_values")
}

model AssetVendor {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  contactName      String?           @map("contact_name") @db.VarChar(255)
  email            String?           @db.VarChar(255)
  phone            String?           @db.VarChar(50)
  address          String?
  website          String?           @db.VarChar(255)
  notes            String?
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  contracts        AssetContract[]
  assets           Asset[]
  softwareLicenses SoftwareLicense[]

  @@map("asset_vendors")
}

model AssetLifecycleEvent {
  id          Int                   @id @default(autoincrement())
  assetId     Int                   @map("asset_id")
  eventType   asset_lifecycle_event @map("event_type")
  description String?
  eventDate   DateTime              @map("event_date") @db.Date
  performedBy Int                   @map("performed_by")
  notes       String?
  metadata    Json?
  createdAt   DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  asset       Asset                 @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user        User                  @relation("AssetLifecycleUser", fields: [performedBy], references: [id])

  @@index([assetId, eventDate])
  @@map("asset_lifecycle_events")
}

model AssetMaintenance {
  id                Int                    @id @default(autoincrement())
  assetId           Int                    @map("asset_id")
  maintenanceType   asset_maintenance_type @map("maintenance_type")
  title             String                 @db.VarChar(255)
  description       String?
  scheduledDate     DateTime               @map("scheduled_date") @db.Date
  completedDate     DateTime?              @map("completed_date") @db.Date
  status            maintenance_status     @default(scheduled)
  cost              Decimal?               @db.Decimal(10, 2)
  performedBy       String?                @map("performed_by") @db.VarChar(255)
  notes             String?
  nextScheduledDate DateTime?              @map("next_scheduled_date") @db.Date
  createdByUserId   Int                    @map("created_by_user_id")
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  asset             Asset                  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  createdBy         User                   @relation("AssetMaintenanceCreator", fields: [createdByUserId], references: [id])

  @@index([assetId, scheduledDate])
  @@index([status])
  @@map("asset_maintenance")
}

model AssetContract {
  id              Int             @id @default(autoincrement())
  assetId         Int             @map("asset_id")
  vendorId        Int             @map("vendor_id")
  contractType    contract_type   @map("contract_type")
  title           String          @db.VarChar(255)
  description     String?
  contractNumber  String?         @map("contract_number") @db.VarChar(100)
  startDate       DateTime        @map("start_date") @db.Date
  endDate         DateTime        @map("end_date") @db.Date
  cost            Decimal         @db.Decimal(12, 2)
  renewalDate     DateTime?       @map("renewal_date") @db.Date
  autoRenewal     Boolean         @default(false) @map("auto_renewal")
  status          contract_status @default(active)
  terms           String?
  createdByUserId Int             @map("created_by_user_id")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  asset           Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  createdBy       User            @relation("AssetContractCreator", fields: [createdByUserId], references: [id])
  vendor          AssetVendor     @relation(fields: [vendorId], references: [id])

  @@index([assetId])
  @@index([endDate])
  @@index([status])
  @@map("asset_contracts")
}

model AssetRelationship {
  id               Int                     @id @default(autoincrement())
  parentAssetId    Int                     @map("parent_asset_id")
  childAssetId     Int                     @map("child_asset_id")
  relationshipType asset_relationship_type @map("relationship_type")
  description      String?
  createdAt        DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  childAsset       Asset                   @relation("AssetChild", fields: [childAssetId], references: [id], onDelete: Cascade)
  parentAsset      Asset                   @relation("AssetParent", fields: [parentAssetId], references: [id], onDelete: Cascade)

  @@unique([parentAssetId, childAssetId, relationshipType])
  @@map("asset_relationships")
}

model AssetTransfer {
  id             Int                 @id @default(autoincrement())
  assetId        Int                 @map("asset_id")
  transferType   asset_transfer_type @map("transfer_type")
  fromUserId     Int?                @map("from_user_id")
  toUserId       Int?                @map("to_user_id")
  fromLocationId Int?                @map("from_location_id")
  toLocationId   Int?                @map("to_location_id")
  fromDeptId     Int?                @map("from_dept_id")
  toDeptId       Int?                @map("to_dept_id")
  transferDate   DateTime            @map("transfer_date") @db.Date
  reason         String?
  notes          String?
  status         transfer_status     @default(pending)
  requestedBy    Int                 @map("requested_by")
  approvedBy     Int?                @map("approved_by")
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  approver       User?               @relation("AssetTransferApprover", fields: [approvedBy], references: [id])
  asset          Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  fromDept       Department?         @relation("AssetTransferFromDept", fields: [fromDeptId], references: [id])
  fromLocation   Unit?               @relation("AssetTransferFromLocation", fields: [fromLocationId], references: [id])
  fromUser       User?               @relation("AssetTransferFromUser", fields: [fromUserId], references: [id])
  requester      User                @relation("AssetTransferRequester", fields: [requestedBy], references: [id])
  toDept         Department?         @relation("AssetTransferToDept", fields: [toDeptId], references: [id])
  toLocation     Unit?               @relation("AssetTransferToLocation", fields: [toLocationId], references: [id])
  toUser         User?               @relation("AssetTransferToUser", fields: [toUserId], references: [id])

  @@index([assetId])
  @@index([transferDate])
  @@index([status])
  @@map("asset_transfers")
}

model AssetAudit {
  id              Int          @id @default(autoincrement())
  assetId         Int          @map("asset_id")
  auditType       audit_type   @map("audit_type")
  auditDate       DateTime     @map("audit_date") @db.Date
  auditedBy       Int          @map("audited_by")
  findings        String?
  recommendations String?
  status          audit_status @default(pending)
  dueDate         DateTime?    @map("due_date") @db.Date
  completedDate   DateTime?    @map("completed_date") @db.Date
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  asset           Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  auditor         User         @relation("AssetAuditor", fields: [auditedBy], references: [id])

  @@index([assetId, auditDate])
  @@index([status])
  @@map("asset_audits")
}

model CIType {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique @db.VarChar(100)
  description        String?
  category           String              @db.VarChar(50)
  icon               String?             @db.VarChar(50)
  isActive           Boolean             @default(true) @map("is_active")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  ciAttributes       CITypeAttribute[]
  configurationItems ConfigurationItem[]

  @@map("ci_types")
}

model CITypeAttribute {
  id           Int                @id @default(autoincrement())
  ciTypeId     Int                @map("ci_type_id")
  name         String             @db.VarChar(100)
  label        String             @db.VarChar(150)
  fieldType    field_type         @map("field_type")
  isRequired   Boolean            @default(false) @map("is_required")
  options      Json?
  validation   Json?
  sortOrder    Int                @default(0) @map("sort_order")
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  ciAttributes CIAttributeValue[]
  ciType       CIType             @relation(fields: [ciTypeId], references: [id], onDelete: Cascade)

  @@unique([ciTypeId, name])
  @@map("ci_type_attributes")
}

model ConfigurationItem {
  id                  Int                  @id @default(autoincrement())
  ciId                String               @unique @map("ci_id") @db.VarChar(50)
  name                String               @db.VarChar(255)
  description         String?
  ciTypeId            Int                  @map("ci_type_id")
  assetTypeId         Int?                 @map("asset_type_id")
  assetId             Int?                 @map("asset_id")
  status              ci_status            @default(active)
  environment         String?              @db.VarChar(50)
  businessCriticality business_criticality @default(medium) @map("business_criticality")
  ownerId             Int?                 @map("owner_id")
  locationId          Int?                 @map("location_id")
  version             String?              @db.VarChar(50)
  ipAddress           String?              @map("ip_address") @db.VarChar(45)
  hostname            String?              @db.VarChar(255)
  operatingSystem     String?              @map("operating_system") @db.VarChar(100)
  notes               String?
  customFields        Json?                @map("custom_fields")
  discoveredDate      DateTime?            @map("discovered_date") @db.Date
  lastUpdated         DateTime             @default(now()) @map("last_updated") @db.Timestamptz(6)
  createdByUserId     Int                  @map("created_by_user_id")
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  ciAttributes        CIAttributeValue[]
  changes             CIChange[]
  incidents           CIIncident[]
  childRelationships  CIRelationship[]     @relation("CIChild")
  relationships       CIRelationship[]     @relation("CIParent")
  asset               Asset?               @relation(fields: [assetId], references: [id])
  assetType           AssetType?           @relation(fields: [assetTypeId], references: [id])
  ciType              CIType               @relation(fields: [ciTypeId], references: [id])
  createdBy           User                 @relation("CICreator", fields: [createdByUserId], references: [id])
  location            Unit?                @relation("CILocation", fields: [locationId], references: [id])
  owner               User?                @relation("CIOwner", fields: [ownerId], references: [id])

  @@index([ciId])
  @@index([status])
  @@index([ciTypeId])
  @@index([assetId])
  @@map("configuration_items")
}

model CIAttributeValue {
  id                Int               @id @default(autoincrement())
  ciId              Int               @map("ci_id")
  attributeId       Int               @map("attribute_id")
  value             String?
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  attribute         CITypeAttribute   @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  configurationItem ConfigurationItem @relation(fields: [ciId], references: [id], onDelete: Cascade)

  @@unique([ciId, attributeId])
  @@map("ci_attribute_values")
}

model CIRelationship {
  id               Int                  @id @default(autoincrement())
  parentCIId       Int                  @map("parent_ci_id")
  childCIId        Int                  @map("child_ci_id")
  relationshipType ci_relationship_type @map("relationship_type")
  description      String?
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  childCI          ConfigurationItem    @relation("CIChild", fields: [childCIId], references: [id], onDelete: Cascade)
  parentCI         ConfigurationItem    @relation("CIParent", fields: [parentCIId], references: [id], onDelete: Cascade)

  @@unique([parentCIId, childCIId, relationshipType])
  @@map("ci_relationships")
}

model CIIncident {
  id                Int               @id @default(autoincrement())
  ciId              Int               @map("ci_id")
  ticketId          Int               @map("ticket_id")
  impact            business_impact   @default(low)
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  configurationItem ConfigurationItem @relation(fields: [ciId], references: [id], onDelete: Cascade)
  ticket            Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ciId, ticketId])
  @@map("ci_incidents")
}

model CIChange {
  id                Int               @id @default(autoincrement())
  ciId              Int               @map("ci_id")
  changeType        ci_change_type    @map("change_type")
  changeDescription String            @map("change_description")
  plannedDate       DateTime?         @map("planned_date") @db.Date
  completedDate     DateTime?         @map("completed_date") @db.Date
  impact            business_impact   @default(low)
  requestedBy       Int               @map("requested_by")
  approvedBy        Int?              @map("approved_by")
  status            change_status     @default(planning)
  notes             String?
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  approver          User?             @relation("CIChangeApprover", fields: [approvedBy], references: [id])
  configurationItem ConfigurationItem @relation(fields: [ciId], references: [id], onDelete: Cascade)
  requester         User              @relation("CIChangeRequester", fields: [requestedBy], references: [id])

  @@index([ciId])
  @@index([status])
  @@map("ci_changes")
}

model SoftwareAsset {
  id               Int                    @id @default(autoincrement())
  name             String                 @db.VarChar(255)
  version          String?                @db.VarChar(50)
  publisher        String?                @db.VarChar(255)
  category         String                 @db.VarChar(100)
  assetId          Int?                   @map("asset_id")
  installationPath String?                @map("installation_path")
  licenseKey       String?                @map("license_key") @db.VarChar(255)
  installDate      DateTime?              @map("install_date") @db.Date
  lastUsed         DateTime?              @map("last_used") @db.Date
  usageCount       Int                    @default(0) @map("usage_count")
  isActive         Boolean                @default(true) @map("is_active")
  notes            String?
  createdAt        DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  asset            Asset?                 @relation(fields: [assetId], references: [id])
  installations    SoftwareInstallation[]

  @@index([name, version])
  @@index([assetId])
  @@map("software_assets")
}

model SoftwareLicense {
  id                Int                    @id @default(autoincrement())
  name              String                 @db.VarChar(255)
  licenseType       software_license_type  @map("license_type")
  totalLicenses     Int                    @map("total_licenses")
  usedLicenses      Int                    @default(0) @map("used_licenses")
  availableLicenses Int                    @default(0) @map("available_licenses")
  vendorId          Int?                   @map("vendor_id")
  purchaseDate      DateTime?              @map("purchase_date") @db.Date
  expiryDate        DateTime?              @map("expiry_date") @db.Date
  maintenanceExpiry DateTime?              @map("maintenance_expiry") @db.Date
  cost              Decimal?               @db.Decimal(12, 2)
  isActive          Boolean                @default(true) @map("is_active")
  notes             String?
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  installations     SoftwareInstallation[]
  vendor            AssetVendor?           @relation(fields: [vendorId], references: [id])

  @@index([name])
  @@index([expiryDate])
  @@map("software_licenses")
}

model SoftwareInstallation {
  id              Int                 @id @default(autoincrement())
  softwareAssetId Int                 @map("software_asset_id")
  licenseId       Int?                @map("license_id")
  assetId         Int                 @map("asset_id")
  userId          Int?                @map("user_id")
  installDate     DateTime            @map("install_date") @db.Date
  status          installation_status @default(active)
  version         String?             @db.VarChar(50)
  licenseKey      String?             @map("license_key") @db.VarChar(255)
  notes           String?
  createdAt       DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  asset           Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  license         SoftwareLicense?    @relation(fields: [licenseId], references: [id])
  softwareAsset   SoftwareAsset       @relation(fields: [softwareAssetId], references: [id], onDelete: Cascade)
  user            User?               @relation("SoftwareInstallationUser", fields: [userId], references: [id])

  @@unique([softwareAssetId, assetId])
  @@index([assetId])
  @@index([status])
  @@map("software_installations")
}

model KnowledgeCategory {
  id          Int                 @id @default(autoincrement())
  name        String              @db.VarChar(100)
  description String?
  parentId    Int?                @map("parent_id")
  icon        String?             @db.VarChar(50)
  color       String?             @db.VarChar(20)
  sortOrder   Int                 @default(0) @map("sort_order")
  isActive    Boolean             @default(true) @map("is_active")
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  articles    KnowledgeArticle[]
  parent      KnowledgeCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children    KnowledgeCategory[] @relation("CategoryHierarchy")

  @@unique([name, parentId])
  @@index([isActive, sortOrder])
  @@map("knowledge_categories")
}

model KnowledgeArticle {
  id              Int                        @id @default(autoincrement())
  title           String                     @db.VarChar(255)
  content         String
  excerpt         String?                    @db.VarChar(500)
  categoryId      Int?                       @map("category_id")
  tags            String[]
  status          knowledge_status           @default(draft)
  publishedAt     DateTime?                  @map("published_at") @db.Timestamptz(6)
  authorId        Int                        @map("author_id")
  editorId        Int?                       @map("editor_id")
  viewCount       Int                        @default(0) @map("view_count")
  helpfulCount    Int                        @default(0) @map("helpful_count")
  notHelpfulCount Int                        @default(0) @map("not_helpful_count")
  searchKeywords  String?                    @map("search_keywords") @db.VarChar(500)
  attachments     Json?
  metadata        Json?
  createdAt       DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  feedbacks       KnowledgeArticleFeedback[]
  views           KnowledgeArticleView[]
  author          User                       @relation("ArticleAuthor", fields: [authorId], references: [id])
  category        KnowledgeCategory?         @relation(fields: [categoryId], references: [id])
  editor          User?                      @relation("ArticleEditor", fields: [editorId], references: [id])
  ticketLinks     KnowledgeTicketLink[]

  @@index([status, publishedAt])
  @@index([categoryId, status])
  @@index([authorId])
  @@index([viewCount])
  @@map("knowledge_articles")
}

model KnowledgeArticleView {
  id        Int              @id @default(autoincrement())
  articleId Int              @map("article_id")
  userId    Int?             @map("user_id")
  ipAddress String?          @map("ip_address") @db.VarChar(45)
  userAgent String?          @map("user_agent") @db.VarChar(500)
  viewedAt  DateTime         @default(now()) @map("viewed_at") @db.Timestamptz(6)
  article   KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User?            @relation("ArticleViewer", fields: [userId], references: [id])

  @@index([articleId, viewedAt])
  @@index([userId])
  @@map("knowledge_article_views")
}

model KnowledgeTicketLink {
  id        Int              @id @default(autoincrement())
  articleId Int              @map("article_id")
  ticketId  Int              @map("ticket_id")
  linkType  kb_link_type     @default(referenced)
  linkedBy  Int              @map("linked_by")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  article   KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User             @relation("KnowledgeLinkCreator", fields: [linkedBy], references: [id])
  ticket    Ticket           @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([articleId, ticketId, linkType])
  @@index([ticketId])
  @@index([articleId])
  @@map("knowledge_ticket_links")
}

model KnowledgeArticleFeedback {
  id        Int              @id @default(autoincrement())
  articleId Int              @map("article_id")
  userId    Int?             @map("user_id")
  isHelpful Boolean          @map("is_helpful")
  comment   String?
  ipAddress String?          @map("ip_address") @db.VarChar(45)
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  article   KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User?            @relation("ArticleFeedbackUser", fields: [userId], references: [id])

  @@unique([articleId, userId, ipAddress])
  @@index([articleId, isHelpful])
  @@map("knowledge_article_feedback")
}

enum ticket_priority {
  low
  medium
  high
  urgent
}

enum ticket_status {
  open
  in_progress
  pending_requester_response
  resolved
  closed
  awaiting_approval
  approved
  rejected
  pending_approval           @map("pending-approval")
  awaiting_changes           @map("awaiting-changes")
  assigned
  cancelled
  duplicate
  pending
}

enum service_type {
  business_service
  technical_service
  government_service
}

enum request_type {
  service_request
  incident
  problem
  change_request
}

enum template_type {
  standard
  government
  kasda_specific
  internal_only
}

enum field_type {
  text
  textarea
  number
  email
  phone
  date
  datetime
  dropdown
  radio
  checkbox
  file_upload
  government_id
  budget_code
  treasury_account
}

enum business_impact {
  low
  medium
  high
  critical
}

enum approval_status {
  pending
  approved
  rejected
  review_required
}

enum root_cause_type {
  human_error
  system_error
  external_factor
  undetermined
}

enum issue_category_type {
  request
  complaint
  problem
}

enum comment_type {
  comment
  status_change
  assignment_change
  resolution
  closure
  escalation
  approval
}

enum notification_type {
  mention
  reply
  new_comment
  status_update
  assignment
}

enum escalation_status {
  active
  resolved
  cancelled
  failed
}

enum asset_status {
  requested
  ordered
  received
  deployed
  active
  inactive
  maintenance
  retired
  disposed
  lost
  stolen
}

enum asset_condition {
  new
  excellent
  good
  fair
  poor
  damaged
  non_functional
}

enum asset_lifecycle_event {
  requested
  ordered
  received
  deployed
  transferred
  upgraded
  maintained
  retired
  disposed
}

enum asset_maintenance_type {
  preventive
  corrective
  emergency
  upgrade
  calibration
  inspection
}

enum maintenance_status {
  scheduled
  in_progress
  completed
  cancelled
  overdue
}

enum contract_type {
  warranty
  maintenance
  support
  lease
  rental
  insurance
}

enum contract_status {
  active
  expired
  cancelled
  suspended
  pending
}

enum asset_relationship_type {
  contains
  depends_on
  connects_to
  uses
  installed_on
  powers
  backs_up
  clusters_with
}

enum asset_transfer_type {
  assignment
  relocation
  temporary_loan
  permanent_transfer
  return
}

enum transfer_status {
  pending
  approved
  in_transit
  completed
  cancelled
  rejected
}

enum audit_type {
  physical
  financial
  compliance
  security
  lifecycle
  performance
}

enum audit_status {
  pending
  in_progress
  completed
  cancelled
  overdue
}

enum ci_status {
  active
  inactive
  retired
  under_change
  failed
  unknown
}

enum business_criticality {
  low
  medium
  high
  critical
}

enum ci_relationship_type {
  depends_on
  hosted_on
  connected_to
  uses
  part_of
  installed_on
  runs_on
  communicates_with
}

enum ci_change_type {
  add
  modify
  remove
  relocate
  upgrade
  downgrade
}

enum change_status {
  planning
  approved
  implementing
  completed
  cancelled
  failed
  rolled_back
}

enum software_license_type {
  perpetual
  subscription
  concurrent
  named_user
  device_based
  enterprise
  oem
  volume
  site_license
}

enum installation_status {
  active
  inactive
  pending
  failed
  uninstalled
}

enum knowledge_status {
  draft
  published
  archived
}

enum kb_link_type {
  referenced
  resolved_with
  related_to
}
