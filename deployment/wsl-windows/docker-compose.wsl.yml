version: '3.8'

services:
  # PostgreSQL Database - WSL Optimized
  postgres:
    image: postgres:15-alpine
    container_name: bsg-helpdesk-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ticketing_system_db}
      POSTGRES_USER: ${POSTGRES_USER:-helpdesk_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-helpdesk_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - helpdesk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-helpdesk_user} -d ${POSTGRES_DB:-ticketing_system_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # WSL-specific configuration
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache - WSL Optimized
  redis:
    image: redis:7-alpine
    container_name: bsg-helpdesk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - helpdesk-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # WSL-specific configuration
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Backend API - WSL Optimized
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.wsl
    container_name: bsg-helpdesk-backend
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-helpdesk_user}:${POSTGRES_PASSWORD:-helpdesk_pass}@postgres:5432/${POSTGRES_DB:-ticketing_system_db}"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: ${JWT_SECRET:-development-secret-change-in-production}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-BSG Helpdesk <noreply@company.com>}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      # WSL-specific settings
      WSL_HOST_IP: ${WSL_HOST_IP:-localhost}
    ports:
      - "3001:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - helpdesk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # WSL-specific configuration
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Application - WSL Optimized
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.wsl
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
        REACT_APP_APP_NAME: ${REACT_APP_APP_NAME:-BSG Helpdesk}
    container_name: bsg-helpdesk-frontend
    ports:
      - "3000:80"
    networks:
      - helpdesk-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    # WSL-specific configuration
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  helpdesk-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1460  # WSL-optimized MTU